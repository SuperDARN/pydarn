"""
Test data sets for Borealis Rawacf.
"""
import numpy as np

from collections import OrderedDict


borealis_site_rawacf_data = OrderedDict([(str(1558583991060), {
    "borealis_git_hash": np.unicode_('v0.2-61-gc13ab34'),
    "experiment_id": np.int64(100000000),
    "experiment_name": np.unicode_('TestScheme9ACFs'),
    "experiment_comment": np.unicode_(''),
    "num_slices": np.int64(1),
    "slice_comment": np.unicode_(''),
    "station": np.unicode_('sas'),
    "num_sequences": np.int64(29),
    "range_sep": np.float32(44.96887),
    "first_range_rtt": np.float32(1200.8307),
    "first_range": np.float32(180.0),
    "rx_sample_rate": np.float64(3333.3333333333335),
    "scan_start_marker": np.bool_(True),
    "int_time": np.float32(3.000395),
    "tx_pulse_len": np.uint32(300),
    "tau_spacing": np.uint32(2400),
    "main_antenna_count": np.uint32(16),
    "intf_antenna_count": np.uint32(4),
    "freq": np.uint32(10500),
    "samples_data_type": np.unicode_('complex float'),
    "pulses": np.array([0, 9, 12, 20, 22, 26, 27]).astype(np.uint32),
    "lags": np.array([[0,  0],
                      [26, 27],
                      [20, 22],
                      [9, 12],
                      [22, 26],
                      [22, 27],
                      [20, 26],
                      [20, 27],
                      [12, 20],
                      [0, 9],
                      [12, 22],
                      [9, 20],
                      [0, 12],
                      [9, 22],
                      [12, 26],
                      [12, 27],
                      [9, 26],
                      [9, 27],
                      [0, 20],
                      [0, 22],
                      [0, 26],
                      [0, 27],
                      [27, 27]]).astype(np.uint32),
    "blanked_samples": np.array([0, 72, 96,
                                 160, 176, 208, 216]).astype(np.uint32),
    "sqn_timestamps": np.array([1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09, 1.55858399e+09,
                                1.55858399e+09]),
    "beam_nums": np.array([0]).astype(np.uint32),
    "beam_azms": np.array([0.0]),
    "correlation_descriptors": np.array(['num_beams', 'num_ranges',
                                         'num_lags']),
    "correlation_dimensions": np.array([1, 75, 23]).astype(np.uint32),
    "main_acfs": np.zeros(1725).astype(np.complex64),
    "intf_acfs": np.zeros(1725).astype(np.complex64),
    "xcfs": np.zeros(1725).astype(np.complex64),
    "noise_at_freq": np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                               0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                               0., 0., 0., 0., 0., 0., 0.]),
    "data_normalization_factor": np.float64(9999999.999999996)}),
    (str(1558583994062), {
        "borealis_git_hash": np.unicode_('v0.2-61-gc13ab34'),
        "experiment_id": np.int64(100000000),
        "experiment_name": np.unicode_('TestScheme9ACFs'),
        "experiment_comment": np.unicode_(''),
        "num_slices": np.int64(1),
        "slice_comment": np.unicode_(''),
        "station": np.unicode_('sas'),
        "num_sequences": np.int64(30),
        "range_sep": np.float32(44.96887),
        "first_range_rtt": np.float32(1200.8307),
        "first_range": np.float32(180.0),
        "rx_sample_rate": np.float64(3333.3333333333335),
        "scan_start_marker": np.bool_(True),
        "int_time": np.float32(3.090798),
        "tx_pulse_len": np.uint32(300),
        "tau_spacing": np.uint32(2400),
        "main_antenna_count": np.uint32(16),
        "intf_antenna_count": np.uint32(4),
        "freq": np.uint32(10500),
        "samples_data_type": np.unicode_('complex float'),
        "pulses": np.array([0, 9, 12, 20, 22, 26, 27]).astype(np.uint32),
        "lags": np.array([[0,  0],
                          [26, 27],
                          [20, 22],
                          [9, 12],
                          [22, 26],
                          [22, 27],
                          [20, 26],
                          [20, 27],
                          [12, 20],
                          [0, 9],
                          [12, 22],
                          [9, 20],
                          [0, 12],
                          [9, 22],
                          [12, 26],
                          [12, 27],
                          [9, 26],
                          [9, 27],
                          [0, 20],
                          [0, 22],
                          [0, 26],
                          [0, 27],
                          [27, 27]]).astype(np.uint32),
        "blanked_samples": np.array([0, 72, 96, 160,
                                     176, 208, 216]).astype(np.uint32),
        "sqn_timestamps": np.array([1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09, 1.55858399e+09,
                                    1.55858399e+09]),
        "beam_nums": np.array([0]).astype(np.uint32),
        "beam_azms": np.array([0.0]),
        "correlation_descriptors": np.array(['num_beams', 'num_ranges',
                                             'num_lags']),
        "correlation_dimensions": np.array([1, 75, 23]).astype(np.uint32),
        "main_acfs": np.zeros(1725).astype(np.complex64),
        "intf_acfs": np.zeros(1725).astype(np.complex64),
        "xcfs": np.zeros(1725).astype(np.complex64),
        "noise_at_freq": np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                                   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                                   0., 0., 0., 0., 0., 0., 0.]),
        "data_normalization_factor": np.float64(9999999.999999996)
        })])

num_records = 1500
borealis_array_rawacf_data = {
    "borealis_git_hash": np.unicode_('v0.2-61-gc13ab34'),
    "experiment_id": np.int64(100000000),
    "experiment_name": np.unicode_('TestScheme9ACFs'),
    "experiment_comment": np.unicode_(''),
    "num_slices": np.array([1] * num_records).astype(np.int64),
    "slice_comment": np.unicode_(''),
    "station": np.unicode_('sas'),
    "range_sep": np.float32(44.96887),
    "first_range_rtt": np.float32(1200.8307),
    "first_range": np.float32(180.0),
    "rx_sample_rate": np.float64(3333.3333333333335),
    "scan_start_marker": np.array([True] * num_records).astype(np.bool_),
    "tx_pulse_len": np.uint32(300),
    "tau_spacing": np.uint32(2400),
    "main_antenna_count": np.uint32(16),
    "intf_antenna_count": np.uint32(4),
    "freq": np.uint32(10500),
    "num_beams": np.array([1] * num_records).astype(np.uint32),
    "samples_data_type": np.unicode_('complex float'),
    "pulses": np.array([0, 9, 12, 20, 22, 26, 27]).astype(np.uint32),
    "data_normalization_factor": np.float64(9999999.999999996),
    "lags": np.array([[0,  0],
                      [26, 27],
                      [20, 22],
                      [9, 12],
                      [22, 26],
                      [22, 27],
                      [20, 26],
                      [20, 27],
                      [12, 20],
                      [0, 9],
                      [12, 22],
                      [9, 20],
                      [0, 12],
                      [9, 22],
                      [12, 26],
                      [12, 27],
                      [9, 26],
                      [9, 27],
                      [0, 20],
                      [0, 22],
                      [0, 26],
                      [0, 27],
                      [27, 27]]).astype(np.uint32),
    "blanked_samples": np.array([0, 72, 96, 160,
                                 176, 208, 216]).astype(np.uint32),
    "beam_nums": np.array([[0]] * num_records).astype(np.uint32),
    "beam_azms": np.array([[0.0]] * num_records),
    "correlation_descriptors": np.array(['num_records', 'num_beams',
                                         'num_ranges', 'num_lags']),
    "int_time": np.array([3.000395] * num_records).astype(np.float32),
    "num_sequences": np.array([np.int64(29)] * num_records, dtype=np.int64),
    "sqn_timestamps": np.array([[1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09, 1.55858399e+09,
                                 1.55858399e+09]] * num_records),
    "main_acfs": np.zeros((num_records, 1, 75, 23)).astype(np.complex64),
    "intf_acfs": np.zeros((num_records, 1, 75, 23)).astype(np.complex64),
    "xcfs": np.zeros((num_records, 1, 75, 23)).astype(np.complex64),
    "noise_at_freq": np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                                0., 0., 0., 0., 0., 0., 0.]] * num_records)
    }
