# Copyright (C) 2019 SuperDARN
# Author: Marina Schmidt

"""
Test data sets for DmapWrite
"""
import numpy as np

from collections import OrderedDict

from pydarn import DmapScalar, DmapArray

grid_data = [OrderedDict([('start.year', np.int16(2018)), ('start.month', np.int16(2)), ('start.day', np.int16(20)), ('start.hour', np.int16(0)), ('start.minute', np.int16(6)), ('start.second', np.float64(0.0040569305419921875)), ('end.year', np.int16(2018)), ('end.month', np.int16(2)), ('end.day', np.int16(20)), ('end.hour', np.int16(0)), ('end.minute', np.int16(8)), ('end.second', np.float64(0.0040569305419921875)), ('stid', np.array([65], dtype=np.int16)), ('channel', np.array([0], dtype=np.int16)), ('nvec', np.array([45], dtype=np.int16)), ('freq', np.array([11348.719], dtype=np.float32)), ('major.revision', np.array([2], dtype=np.int16)), ('minor.revision', np.array([0], dtype=np.int16)), ('program.id', np.array([3505], dtype=np.int16)), ('noise.mean', np.array([10.59375], dtype=np.float32)), ('noise.sd', np.array([1.5636357], dtype=np.float32)), ('gsct', np.array([1], dtype=np.int16)), ('v.min', np.array([35.], dtype=np.float32)), ('v.max', np.array([2500.], dtype=np.float32)), ('p.min', np.array([3.], dtype=np.float32)), ('p.max', np.array([60.], dtype=np.float32)), ('w.min', np.array([10.], dtype=np.float32)), ('w.max', np.array([1000.], dtype=np.float32)), ('ve.min', np.array([0.], dtype=np.float32)), ('ve.max', np.array([200.], dtype=np.float32)), ('vector.mlat', np.array([72.5, 73.5, 74.5, 79.5, 79.5, 80.5, 73.5, 74.5, 80.5, 72.5, 79.5,
       80.5, 82.5, 82.5, 83.5, 81.5, 84.5, 82.5, 80.5, 81.5, 79.5, 81.5,
       73.5, 80.5, 83.5, 79.5, 80.5, 81.5, 82.5, 83.5, 79.5, 81.5, 72.5,
       80.5, 78.5, 79.5, 80.5, 79.5, 80.5, 73.5, 74.5, 78.5, 79.5, 78.5,
       79.5], dtype=np.float32)), ('vector.mlon', np.array([335.       , 333.52942  , 331.875    , 319.0909   , 313.63635  ,
       308.1356   , 337.05884  , 335.625    , 314.23727  , 338.33334  ,
       324.54544  , 320.339    , 310.21277  , 317.87234  , 311.7073   ,
       329.43396  , 313.7143   , 333.1915   , 338.64407  , 336.2264   ,
       340.9091   , 343.01886  , 340.58823  , 344.74576  , 346.82925  ,
       346.36365  , 350.84744  , 349.8113   , 356.17023  , 355.60974  ,
       351.81818  , 356.60376  , 341.66666  , 356.94916  , 352.5      ,
       357.27274  ,   3.0508475,   2.7272727,   9.152542 , 344.11765  ,
       346.875    ,   2.5      ,   8.181818 ,   7.5      ,  13.636364 ],
      dtype=np.float32)), ('vector.kvect', np.array([ 150.48602 ,  150.38976 ,  149.73271 ,  -44.11724 ,  -48.90261 ,
        -52.720737,  168.25351 ,  159.23058 ,  -44.17332 ,  174.83675 ,
        149.24484 ,  145.81033 ,  133.7058  ,  143.56154 ,  139.32442 ,
        166.77945 ,  143.30453 ,  175.14447 ,  179.95691 ,  175.5118  ,
       -172.71599 , -172.94543 , -163.22404 , -167.09595 , -164.52101 ,
       -161.34946 , -155.4211  , -159.47032 , -153.30176 , -153.61163 ,
       -149.5504  , -146.24246 , -149.24686 , -143.59334 , -142.18036 ,
       -138.36761 , -132.77902 , -129.27661 , -123.71623 , -143.01823 ,
       -140.66672 , -125.94862 , -121.524704, -120.69907 , -114.96321 ],
      dtype=np.float32)), ('vector.stid', np.array([65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
       65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
       65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65], dtype=np.int16)), ('vector.channel', np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0], dtype=np.int16)), ('vector.index', np.array([72100, 73094, 74088, 79058, 79057, 80050, 73095, 74089, 80051,
       72101, 79059, 80052, 82040, 82041, 83035, 81048, 84030, 82043,
       80055, 81049, 79062, 81050, 73096, 80056, 83039, 79063, 80057,
       81051, 82046, 83040, 79064, 81052, 72102, 80058, 78070, 79065,
       80000, 79000, 80001, 73097, 74092, 78000, 79001, 78001, 79002],
      dtype=np.int32)), ('vector.vel.median', np.array([211.40865 , 287.75946 , 230.77419 , 187.97984 , 257.93872 ,
       260.47934 , 178.85757 , 232.12292 , 237.11732 , 157.37292 ,
       122.41863 , 100.79391 ,  46.440826,  54.64365 ,  61.027603,
        90.12276 , 114.797516, 106.21644 , 172.39407 , 132.68246 ,
       205.91148 , 207.2965  , 116.40394 , 219.84409 , 223.87404 ,
       234.68289 , 242.02846 , 253.77455 , 248.37881 , 231.41563 ,
       215.56255 , 250.5544  , 103.61616 , 230.06058 , 220.61739 ,
       232.87077 , 236.41026 , 244.11392 , 243.74884 ,  66.45725 ,
        60.761314, 239.27852 , 245.77727 , 253.88075 , 260.77255 ],
      dtype=np.float32)), ('vector.vel.sd', np.array([ 31.622776,  35.35534 ,  35.35534 ,  63.331505,  40.82483 ,
        50.      ,  17.149858,  25.897175,  57.988403,  21.821789,
        53.313816, 130.36421 ,  57.735027,  50.      ,  50.      ,
        50.      ,  70.71068 ,  50.      ,  28.867514,  50.      ,
        44.72136 ,  40.82483 ,  18.898224,  44.72136 ,  44.72136 ,
        40.82483 ,  35.35534 ,  70.71068 ,  57.735027,  70.71068 ,
        50.      ,  50.      ,  30.151134,  28.867514,  57.735027,
        35.35534 ,  35.35534 ,  31.622776,  50.      ,  40.82483 ,
        50.      ,  44.72136 ,  40.82483 ,  50.      ,  44.72136 ],
      dtype=np.float32))])]
